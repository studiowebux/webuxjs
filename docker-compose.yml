# This is for development and demo purpose, DO NOT USE IN PRODUCTION !

version: "2.1"
services:
  backend:
    image: hub.webux.lab/webuxjs-backend:latest
    # build: ./backend
    environment:
      - NODE_ENV=production
      - CLUSTERIZE=false # For now we will get a working single threaded instance
      # - CORES=4
      - PORT=3030
      - DB_URL=@mongodb-primary:27017/webuxjs
      - DB_USER=user
      - DB_PASSWORD=P@55w0r6
      - DB_LOCAL=false
      - DB_DEBUG=false
      - DB_REPSET=replicaset
      - APP_ID=Demo01
      - COOKIE_SECRET="Shut don't talk about that secret!"
      - ORIGIN=http://demo.webux.lab http://localhost http://demo.webux.lab https://demo.webux.lab
      - CONSOLE=true
      - CONSOLE_LEVEL=silly # For debugging we want everything logged !
      - LOGSTASH_URL=logstash
      - JWT_ACCESS_SECRET=RIWW11OEl2N2JrRTNtbFZIVnhUQXI3b283TmtBRm82dTBnc2ZHDQp1TVRwK1Fjdkh1VzA3UFdyQVFJUmNvNU5nVXN2VVdqUnZNK0pYRXphRHR5K1ZMWnlUSksyYTBtU3JlTStRM29WDQpsTVdLVVZ2RE1wdXBPbExIeVI5Q1ljaEJxb3ZSa3JFPQ0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ0K
      - JWT_REFRESH_SECRET=anE2ZUliSVJQTE5adHJsaElMV0VBRnlLWWVEDQpFcmRreXRBakJoeFN5d0tDQVFFQXlFU1A2VHJLNHJ0eVZ0bWc4aThxbENuN0V4OXBvVXpaWTFyWkduMFBFN3B6DQoyNTMwMEZFVlpWRDhGdDZjNGp4QjhpRjQ1a0w3bTR3VndoN1VMSVFGckY1Qmd3WHJqY2NTNXIrd00zT091bjhODQprTFhtQ1NjZ2I
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - REDIS_PASSWORD=SuperSecurePassword232332
      - REDIS_NO_READY_CHECK=true
      - REDIS_MOCK=false
      - COOKIE_SECRET=1YrRG44eDhVUklMOTZhMUJVUFJHT1kwcWdYcHJpTVlaeXlUT05UaTFGdHByVitHTEl3UXhFYnQ0DQowaHpSdTFFaEplKytSY3o4eTV5THJ5STgrODFkdzVvMHlJNU1rMTNrejlJM0s3OEhvUTZJeUFRTXJzM25vZmNjDQpaTTRrTVdJTnU3REpPQmlvMFZDd1pRS0NBUUVBNTd2cG0zaUhjVExmUnVyb3V
      # Doesn't work properly with self-signed certificate and nginx proxy - SSL_KEY=LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUlKUXdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0NTMHdnZ2twQWdFQUFvSUNBUURNcmk4eWZUNnh0MXNJDQo5WkJWNHNMKzNmZ3lpSXFPMXhLQmdCbWduRFBnelRRblpHdytQalFMbnBFYk5hU01oR0FReFU2ZG1RbGdCcTZxDQo5MktERDR0dDR0bGxlL2llWExQSVIybVNWdWxMcTBPR0Z2Rzg0eS9iWFV3eVdycy83SUNyR2x1UFZwbmo1eUltDQoyV2YvVzhjWXZVY3Z5bjdRcnBTMGVzVC80RGVDczBXMUZOalZtOEVGU3F0VytZNzFvcHZjYjhrclRBVHYwM2tODQpuWFlVTHdyRzFHNTBVSFRqRFZhVzRyQXFzTWRWTFBYRkM5VGRnc0FZdURVenk2bTB5WXRKSmNBRmhtZlhmS1I4DQp0MGlaNVc4bzFJakQxVy9lWU1uSXNnbDFPWTZTdUxRNVlTV1BON2hIR1ZoRkFHazZITG5LYm9OUUgvMXNZRiswDQo1ZjhubGRRbXRYa09VeE14OUtFeHBieUpkZ2F3bVF2cHRYb25UblBKQm85TDJBR3pXOWt1VE5SOUNTQ081R2hyDQpkc29MQXYzSlpKaWVVZkpxcW4zaE8rY3lvSkdYbmZyZDZtRXd3V05LT3FTZGdIbUhXaVhEUFNFT29acW9YUno1DQo3cVJwaG5iSkZTUUJrODNuOVkyS25TWVJEYVk4QWtlV0VZZjJmZHVxTExERVhMby91SjlyY2dBNk8ybnNuMEcrDQpKV2RXSHpMVUhhWG9yVk5oK2pTYXR6T1VxNU52RlJDN2NVQ3VYY2FnSzRibVJNVHBqRGxlZXdVdXBpcmZZdDk4DQpEWG1CRTNkUGxjdzl1NFpJMVNkTGRtQU9aMzZ3WXd5dE1YN0M2N0xIUGtMc0NGeVhqTmRoR0J2MjUrSWJxOHp3DQpnOUZVTXIzaSs3NC9RMzBnbElCeURNV1kza1FZaVFJREFRQUJBb0lDQVFDdkg0VmdWSXEwc1dXaGQ4R2p5bDMrDQpoTnFjR2ZrN0Y4ZE1wOWJGZFlCcG9na3lmeGloOU1UQkFFMjFFeU9UMnByN0htWVNMMk0zRnVDUmhSSnpnblJRDQpjNXgvMlI4eUY2ejIraXJZdTZYbVNVVi96OWZMUGpLdkpOZFI2aEYyTXhzdnltQjJkcWs2dG9LZzdMaXZZczRwDQpXNkV4d2JiWlE5WVZ5VWtPaUwvV0F4N3NQVWI5Rk1PRWpJdW00ZVV3UTQzSmdKZUZoUWhnVGZhdjhINmI3RmZ6DQpJTVRVbmhZMFFqQkk3dkc5eFB6MzRuenh1QnJMMzlnT0RtWHV5QjJPZ2phN1FpSldWOVkzSi96d2ZEMFE5NTR4DQpPQTlBUnpqczhyRVRGMGxDVkJtcGJZRTk2dUdnOVJLbE9va3NtSnB2enk0amhvU3hwSDFISWZvaEkvdzQyVmZtDQpzdmVLK3RtdlhJUDJodGdRU2EweDdBSXRXaDNjNlBwN2k3K2JIMmUvT3NjYXpPMUJJbFY0SXRkY251N1ltODV1DQpoQUZ0RmJlZ3dXdVpDcVZmY3daNnh1aDlXVTZGaE1tQ0NIQnBDK3Bsd2Y1TkRDaC9tSjk5VlVTU244Y2hlL1F3DQpPM1VCY1lyeXh6d0FacEJTdE1RdlRCRUF1U0dYbytRaUJOUnlkR3hLWEhSTGsyNG51K011Rk1JOWFSWVppenZSDQo2YmJDcGZhR1YrRG44eDhVUklMOTZhMUJVUFJHT1kwcWdYcHJpTVlaeXlUT05UaTFGdHByVitHTEl3UXhFYnQ0DQowaHpSdTFFaEplKytSY3o4eTV5THJ5STgrODFkdzVvMHlJNU1rMTNrejlJM0s3OEhvUTZJeUFRTXJzM25vZmNjDQpaTTRrTVdJTnU3REpPQmlvMFZDd1pRS0NBUUVBNTd2cG0zaUhjVExmUnVyb3VMUDh1WHVHdm9SMG5oVVROZXlEDQpHaW1BQkdIWWZLK2c1STN6cFBGeGNNMTVuZjZ5OXNrbWx3bWVLZll3U0dsNExweEY1ZVI5dTNVSVlPdFVNazg5DQpIVm55anRhRUxndng3Zjl5VzVzRjlFM0NUQ0VYcnlNR0k3OW0vdnZobFB2SUphUmRnNkREVFNrbG1lUVRRamdoDQpFV3Rqd1NMc1dEWE85ZG5VL056N256RUZHTnVZUXRXbmd3ajBYMFpiU1UvVlRWemVQZThYSUc0eGhlKzh2anJkDQpaMEpkMUgzNUVwa1JzeWZRQmFVQTUvdGs4MGpqa1hYcTlKNWdZdmVJODVRaEZPVE5FbTBYY2Z4N0hPakMzb1F5DQpsVzJVNmR3bVV0UEdmRWtSdGc4d2UwVGRnT28za1Q0a0lxRE9jZ3U0eS84Z051SFRld0tDQVFFQTRoMEx6QXB2DQo1cURPZmk1VmVEN0VXN250SERDenZWN2l5S3hKRmhLdWNWcitvV3phU0RMcnlCRHRUODduK0tPanZ5bTFZSWw4DQozdXlhdXRjK1FOTXZIWlg3OUNnQXR4SXQzQVRhWEkrTkVVNmprTmd6WFRNZVI3djJaVjltUlJhQ3JubWlibVhJDQorNVFNdUpoQWtKTUlZY0ExVko2bjlYTUxoTE0zV1Q5alNMbmFEMXdjbmhRblNQdFl4dlpHRDhETHpVS1U0alNqDQo2ZzNGN3NKYzdLeFJEcjRqSnlDcFdTTHh4TXR5cWkxcEpaUklOaWdrRGg2VFE1V3RKa3BDWk5XaWMvbFE3N3hQDQpaSWJ6U1RjeDNJYjJjMGUveThMVVJpRitreHhlOGNpRW1DRU16anE2ZUliSVJQTE5adHJsaElMV0VBRnlLWWVEDQpFcmRreXRBakJoeFN5d0tDQVFFQXlFU1A2VHJLNHJ0eVZ0bWc4aThxbENuN0V4OXBvVXpaWTFyWkduMFBFN3B6DQoyNTMwMEZFVlpWRDhGdDZjNGp4QjhpRjQ1a0w3bTR3VndoN1VMSVFGckY1Qmd3WHJqY2NTNXIrd00zT091bjhODQprTFhtQ1NjZ2I2YVVDTVJDeklRMDhiaTFENlBVb1R5UmdhM3ZGUWp0Z0ZvcExzQUdyTzU4N2xlUHpId2dvOE5JDQp1aHNXbDBZQVdkK28zYlVCa0xBRzhJdXd6ditvSWNhdUViZWF3ZGNtZ2lQa3VyUkF2RjJwb2tWQkhvSXVrUHVsDQppN3NabnRrallCMXZvUXlUKytUY050UFBrRVJuVEdCY3pSVVJXZnM2ZDFnc1VPaEFoWVZyRTk3djBFLzV4L25vDQpiT0Iwd3VockZBb2dmZ2ZQM2grTWtrcy84MlZCeFRINExPUjV0TFNKalFLQ0FRQkhLcU15NWpvUUdaN0VZaXJ1DQpmTHJxcjlzc0d6d0hKMTB6a2Q0eS8xQStSMGlMWUNwWHZRY3U0ZnovT0gwVWFkUzQ3eFN5UExPN3FqYU5CZ0FIDQpBVEQ4RzkvQUdmTVhxN1laWU1HbGpsejFESTQ0b1lPUkd1eTE0VGdNOGZqTFYrbHJwc2J6L2o5Q3gzYzFobDRUDQo0dU1wZVFpUUNKdU9pbFlldnhWMWxwaldKQUM1QXVIUzh6N21IbzN6bVVHMTVaVi9saXdzQWl0eEdFS3JBaXVqDQpKaDBoQ2NFZ3FJd0VqUllSUFlOcWduNXNvSDRWNVk1cmp6NEVjSkNkMDVPUUR4bGhiU0FIUkhxc2hqaitXMHZyDQpQK05EcDFwN2RHZkJadnRpcS9SS0h6VjBlRHFDa2tOc2VlZUFvL2I0SDM5THRLNVJQVk5FTk8yUkwzMmV3K0d5DQpJNm4vQW9JQkFGdUtsY0pwQXBncnFVck1SYUdwWFdEOHdVZWRwM0NoczZMY01UU21NWFJjUTJTTmMwejRVdVcrDQp2RHBiZ1k5VHZpQkp4RExSRDRWVmZZajNTajdqZmtOZE15b3ZoYldBbWF2OGR3Q2thTE56Y0tldzNqbk5WSDVXDQpDMlA4YTdZMGpac2xCMlJvNENjektra2tlZDBObmJTRW0zR0t1TmZZaFIxZ2txV2htWjlySVhZQlpmR1ZSZ3k2DQpocjE2OHI2V2FGVFBUQTl1NjhScFNwVmRRQjRIWW11OEl2N2JrRTNtbFZIVnhUQXI3b283TmtBRm82dTBnc2ZHDQp1TVRwK1Fjdkh1VzA3UFdyQVFJUmNvNU5nVXN2VVdqUnZNK0pYRXphRHR5K1ZMWnlUSksyYTBtU3JlTStRM29WDQpsTVdLVVZ2RE1wdXBPbExIeVI5Q1ljaEJxb3ZSa3JFPQ0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ0K
      # Doesn't work properly with self-signed certificate and nginx proxy - SSL_CERT=LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGWGpDQ0EwWUNDUUNvWUdJWWlYMkN0VEFOQmdrcWhraUc5dzBCQVFzRkFEQnhNUXN3Q1FZRFZRUUdFd0pEDQpRVEVQTUEwR0ExVUVDQXdHVVhWbFltVmpNUmN3RlFZRFZRUUhEQTVUWVdsdWRHVXRkR2hsY21WelpURWRNQnNHDQpBMVVFQ2d3VVUzUjFaR2x2SUZkbFluVjRJRk11UlM1T0xrTXhHVEFYQmdOVkJBc01FRVp2Y2lCRVpXMXZJRkIxDQpjbkJ2YzJVd0hoY05NVGt3T0RBME1UUXpNREUxV2hjTk1qQXdPREF6TVRRek1ERTFXakJ4TVFzd0NRWURWUVFHDQpFd0pEUVRFUE1BMEdBMVVFQ0F3R1VYVmxZbVZqTVJjd0ZRWURWUVFIREE1VFlXbHVkR1V0ZEdobGNtVnpaVEVkDQpNQnNHQTFVRUNnd1VVM1IxWkdsdklGZGxZblY0SUZNdVJTNU9Ma014R1RBWEJnTlZCQXNNRUVadmNpQkVaVzF2DQpJRkIxY25CdmMyVXdnZ0lpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFETXJpOHlmVDZ4DQp0MXNJOVpCVjRzTCszZmd5aUlxTzF4S0JnQm1nbkRQZ3pUUW5aR3crUGpRTG5wRWJOYVNNaEdBUXhVNmRtUWxnDQpCcTZxOTJLREQ0dHQ0dGxsZS9pZVhMUElSMm1TVnVsTHEwT0dGdkc4NHkvYlhVd3lXcnMvN0lDckdsdVBWcG5qDQo1eUltMldmL1c4Y1l2VWN2eW43UXJwUzBlc1QvNERlQ3MwVzFGTmpWbThFRlNxdFcrWTcxb3B2Y2I4a3JUQVR2DQowM2tOblhZVUx3ckcxRzUwVUhUakRWYVc0ckFxc01kVkxQWEZDOVRkZ3NBWXVEVXp5Nm0weVl0SkpjQUZobWZYDQpmS1I4dDBpWjVXOG8xSWpEMVcvZVlNbklzZ2wxT1k2U3VMUTVZU1dQTjdoSEdWaEZBR2s2SExuS2JvTlFILzFzDQpZRiswNWY4bmxkUW10WGtPVXhNeDlLRXhwYnlKZGdhd21RdnB0WG9uVG5QSkJvOUwyQUd6VzlrdVROUjlDU0NPDQo1R2hyZHNvTEF2M0paSmllVWZKcXFuM2hPK2N5b0pHWG5mcmQ2bUV3d1dOS09xU2RnSG1IV2lYRFBTRU9vWnFvDQpYUno1N3FScGhuYkpGU1FCazgzbjlZMktuU1lSRGFZOEFrZVdFWWYyZmR1cUxMREVYTG8vdUo5cmNnQTZPMm5zDQpuMEcrSldkV0h6TFVIYVhvclZOaCtqU2F0ek9VcTVOdkZSQzdjVUN1WGNhZ0s0Ym1STVRwakRsZWV3VXVwaXJmDQpZdDk4RFhtQkUzZFBsY3c5dTRaSTFTZExkbUFPWjM2d1l3eXRNWDdDNjdMSFBrTHNDRnlYak5kaEdCdjI1K0liDQpxOHp3ZzlGVU1yM2krNzQvUTMwZ2xJQnlETVdZM2tRWWlRSURBUUFCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDDQpBUUF5bk1INit5YVg3VHdPS1ZRaEZqR0trZUdKaUlYY1dDMk0yeUg1Z241Rm5uTm5BQ0IxMFFUYWNac2M1VG5FDQphWTBDL1ExdXd6WUdjZVdXWlF3Qm1wY3hjeWNRWGFobyszak4rK2FSd1NBS3hnQ2paNHVCYmVXOHhJNDBkMDJzDQpRZDBiTHA1a2JaK3JtOS9XOTd6T2tBOWgxZXBsKzdkOXpJWmRNbkxGQWJZenFWS2Z4UjBPMmhiMVNsbmJUZEJHDQphU3ZMRklleWMrak53MEt2VGdLR00wemdDVlZPanhHNUxOclFrMGt6VDlRV2p4V29mTEJLOWhaU2FwVmM0UnVVDQoydHRhMnFnUTUvSXlKK1Bab29hL0ZBQnBBdGtUWVh3blkwZWVOdDNBRlRBTU1DSGtiVVBUY1pKMUs2N3hmMm5kDQoxalo4bzkza09ra21KdXovQW5jemdGQzlPS2l3dUlVV3pFR3k4cmowZC9iSHVycTUzdjVXOENNZ21qVUJxTVZUDQo4SzU2SjJRa1JZT2JvS2FkZGJWcUxZWmJNZ1FYSzhoVXhoNDhyQTNXZGN1RFAwd2ovSDJnTEgxbGN5eElVeFAxDQpwbW9PbGZKRC9Pd2RMZEkyUjdBRkE3eForWTgxU1RRYUczOFZCS1Rub1JRYytucnJ4OGIvUDZQYjFHNEJLVXFVDQp5eWZZQU5haEExcFJ0S1ljRWV0MW5OOVVrbXNmcXVvd3BTdFZleGZQTHpsMU0xNWg0TVk0amY0Z295aHlmK0trDQp5ak8yYVFTK2Ixem1GYlhuYTJoQWdUaFlzVG5Gek5Md2piMnpxYWlIS3dRVytVTU9RZng4NU54cDg3Q2drd3RRDQpSOVBvZ2xXZUdCdzRqc2wzMFJsTFlpUUtPU1laTFZPRDE3MWgyNXloRDlzSEZBPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg==
    ports:
      - "3030"
    volumes:
      - "./app/logs:/usr/src/app/log"
      - "./app/defaults:/usr/src/app/defaults"
      - "./app/uploads:/usr/src/app/uploads"
      - "./app/locales:/usr/src/app/locales"
    restart: always
    links:
      - mongodb-primary
      - logstash
    depends_on:
      mongodb-primary:
        condition: service_healthy
      mongodb-secondary:
        condition: service_healthy
      logstash:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-k",
          "-H",
          "Origin: http://localhost",
          "http://localhost:3030/api/v1/healthcheck",
        ]
      interval: 120s
      timeout: 10s
      retries: 5

  fix-mongodb-permissions:
    image: "bitnami/mongodb:latest"
    user: root
    command: chown -R 1001:1001 /bitnami
    volumes:
      - ./app/mongo_data:/bitnami

  # Default ReplicaSet Name : replicaset
  mongodb-primary:
    image: "bitnami/mongodb:latest"
    environment:
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=NoTSecurEP@5S0Word
      - MONGODB_REPLICA_SET_KEY=SecureReplica5e7K3Y
      - MONGODB_USERNAME=user
      - MONGODB_PASSWORD=P@55w0r6
      - MONGODB_DATABASE=webuxjs
      - MONGODB_SYSTEM_LOG_VERBOSITY=1
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
    depends_on:
      fix-mongodb-permissions:
        condition: service_started
    volumes:
      - "./app/mongo_data:/bitnami"
    healthcheck:
      test:
        [
          "CMD",
          "echo",
          "db.runCommand('ping').ok",
          "| mongo localhost:27017/webuxjs --quiet",
        ]
      interval: 60s
      timeout: 10s
      retries: 5

  mongodb-secondary:
    image: "bitnami/mongodb:latest"
    depends_on:
      mongodb-primary:
        condition: service_healthy
    environment:
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_PRIMARY_HOST=mongodb-primary
      - MONGODB_PRIMARY_PORT_NUMBER=27017
      - MONGODB_PRIMARY_ROOT_PASSWORD=NoTSecurEP@5S0Word
      - MONGODB_REPLICA_SET_KEY=SecureReplica5e7K3Y
      - MONGODB_SYSTEM_LOG_VERBOSITY=1
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
    healthcheck:
      test:
        [
          "CMD",
          "echo",
          "db.runCommand('ping').ok",
          "| mongo localhost:27017/webuxjs --quiet",
        ]
      interval: 60s
      timeout: 10s
      retries: 5

  mongodb-arbiter:
    image: "bitnami/mongodb:latest"
    depends_on:
      mongodb-primary:
        condition: service_healthy
    environment:
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_PRIMARY_HOST=mongodb-primary
      - MONGODB_PRIMARY_PORT_NUMBER=27017
      - MONGODB_PRIMARY_ROOT_PASSWORD=NoTSecurEP@5S0Word
      - MONGODB_REPLICA_SET_KEY=SecureReplica5e7K3Y
      - MONGODB_SYSTEM_LOG_VERBOSITY=1
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
    healthcheck:
      test:
        [
          "CMD",
          "echo",
          "db.runCommand('ping').ok",
          "| mongo localhost:27017/webuxjs --quiet",
        ]
      interval: 60s
      timeout: 10s
      retries: 5

  fix_elasticsearch_permissions:
    user: root
    image: alpine
    command: sh -c "mkdir -p /usr/share/elasticsearch/data && chown 1000:1000 -R /usr/share/elasticsearch/data"
    volumes:
      - ./app/elk/elasticsearch/data:/usr/share/elasticsearch/data

  elasticsearch:
    # build:
    #   context: ./ELK/elasticsearch/
    #   args:
    #     ELK_VERSION: 6.4.2

    image: hub.webux.lab/webuxjs-elasticsearch:latest
    volumes:
      - ./app/elk/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: always
    depends_on:
      fix_elasticsearch_permissions:
        condition: service_started
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"

  logstash:
    # build:
    #   context: ./ELK/logstash/
    #   args:
    #     ELK_VERSION: 6.4.2

    image: hub.webux.lab/webuxjs-logstash:latest
    ports:
      - "5000:5000"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch

  kibana:
    # build:
    #   context: ./ELK/kibana/
    #   args:
    #     ELK_VERSION: 6.4.2

    image: hub.webux.lab/webuxjs-kibana:latest
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  app:
    # build:
    #   context: ./frontend
    image: hub.webux.lab/webuxjs-frontend:latest
    environment:
      - URL=http://demo.webux.lab/api
      - NODE_ENV=production
      - VUE_APP_API_URL=http://demo.webux.lab/api
      - VUE_APP_BASE_URL=/
      - VUE_APP_IO_URL=http://demo.webux.lab
      - VUE_APP_IO_PATH=/socket.io
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./app/nginx/logs/:/var/log/nginx/"
    restart: always
    links:
      - backend
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "80"]
      interval: 120s
      timeout: 10s
      retries: 5

  fix_redis_permissions:
    image: bitnami/redis:latest
    user: root
    command: chown -R 1001:1001 /bitnami
    volumes:
      - ./app/redis:/bitnami

  redis-master:
    image: bitnami/redis:latest
    environment:
      - REDIS_PASSWORD=SuperSecurePassword232332
      - REDIS_REPLICATION_MODE=master
    ports:
      - 6379
    volumes:
      - "./app/redis:/bitnami"
    depends_on:
      fix_redis_permissions:
        condition: service_started
    restart: always
    links:
      - backend

  redis-replica:
    image: "bitnami/redis:latest"
    ports:
      - "6379"
    depends_on:
      - redis-master
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PORT_NUMBER=6379
      - REDIS_MASTER_PASSWORD=SuperSecurePassword232332
      - REDIS_PASSWORD=SuperSecurePassword232332
