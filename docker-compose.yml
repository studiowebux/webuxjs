# This is for development and demo purpose, DO NOT USE IN PRODUCTION !

version: "2.1"
services:
  backend:
    #image: hub.webux.lab/webuxjs-backend:latest
    build: ./backend
    env_file: .env.backend
    ports:
      - "3030"
    volumes:
      - "./app/logs:/usr/src/app/log"
      - "./app/defaults:/usr/src/app/defaults"
      - "./app/uploads:/usr/src/app/uploads"
      - "./app/.tmp:/usr/src/app/.tmp"
      - "./app/locales:/usr/src/app/locales"
    restart: always
    links:
      - mongodb-primary
      - logstash
    depends_on:
      mongodb-primary:
        condition: service_healthy
      mongodb-secondary:
        condition: service_healthy
      logstash:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-k",
          "-H",
          "Origin: http://demo.webux.lab",
          "http://localhost:3030/api/v1/healthcheck",
        ]
      interval: 120s
      timeout: 10s
      retries: 5

  fix-mongodb-permissions:
    image: "bitnami/mongodb:latest"
    user: root
    command: chown -R 1001:1001 /bitnami
    volumes:
      - ./app/mongo_data:/bitnami

  # Default ReplicaSet Name : replicaset
  mongodb-primary:
    image: "bitnami/mongodb:latest"
    env_file: .env.mongodbprimary
    depends_on:
      fix-mongodb-permissions:
        condition: service_started
    volumes:
      - "./app/mongo_data:/bitnami"
    healthcheck:
      test:
        [
          "CMD",
          "echo",
          "db.runCommand('ping').ok",
          "| mongo localhost:27017/webuxjs --quiet",
        ]
      interval: 60s
      timeout: 10s
      retries: 5

  mongodb-secondary:
    image: "bitnami/mongodb:latest"
    depends_on:
      mongodb-primary:
        condition: service_healthy
    env_file: .env.mongodbsecondary
    healthcheck:
      test:
        [
          "CMD",
          "echo",
          "db.runCommand('ping').ok",
          "| mongo localhost:27017/webuxjs --quiet",
        ]
      interval: 60s
      timeout: 10s
      retries: 5

  mongodb-arbiter:
    image: "bitnami/mongodb:latest"
    depends_on:
      mongodb-primary:
        condition: service_healthy
    env_file: .env.mongodbarbiter
    healthcheck:
      test:
        [
          "CMD",
          "echo",
          "db.runCommand('ping').ok",
          "| mongo localhost:27017/webuxjs --quiet",
        ]
      interval: 60s
      timeout: 10s
      retries: 5

  fix_elasticsearch_permissions:
    user: root
    image: alpine
    command: sh -c "mkdir -p /usr/share/elasticsearch/data && chown 1000:1000 -R /usr/share/elasticsearch/data"
    volumes:
      - ./app/elk/elasticsearch/data:/usr/share/elasticsearch/data

  elasticsearch:
    build:
      context: ./ELK/elasticsearch/
      args:
        ELK_VERSION: 6.4.2

    #image: hub.webux.lab/webuxjs-elasticsearch:latest
    volumes:
      - ./app/elk/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: always
    depends_on:
      fix_elasticsearch_permissions:
        condition: service_started
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"

  logstash:
    build:
      context: ./ELK/logstash/
      args:
        ELK_VERSION: 6.4.2

    #image: hub.webux.lab/webuxjs-logstash:latest
    ports:
      - "5000:5000"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: ./ELK/kibana/
      args:
        ELK_VERSION: 6.4.2

    #image: hub.webux.lab/webuxjs-kibana:latest
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  app:
    build:
      context: ./frontend
    #image: hub.webux.lab/webuxjs-frontend:latest
    env_file: .env.app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./app/nginx/logs/:/var/log/nginx/"
    restart: always
    links:
      - backend
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "80"]
      interval: 120s
      timeout: 10s
      retries: 5

  fix_redis_permissions:
    image: bitnami/redis:latest
    user: root
    command: chown -R 1001:1001 /bitnami
    volumes:
      - ./app/redis:/bitnami

  redis-master:
    image: bitnami/redis:latest
    env_file: .env.redismaster
    ports:
      - 6379
    volumes:
      - "./app/redis:/bitnami"
    depends_on:
      fix_redis_permissions:
        condition: service_started
    restart: always
    links:
      - backend

  redis-replica:
    image: "bitnami/redis:latest"
    ports:
      - "6379"
    depends_on:
      - redis-master
    env_file: .env.redisslave
